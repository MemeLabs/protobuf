// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: test/message.proto

package test

import (
	internal "github.com/MemeLabs/protobuf/pkg/apis/test/internal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestMessage_TestEnum int32

const (
	TestMessage_TEST_ENUM_VAL_0 TestMessage_TestEnum = 0
	TestMessage_TEST_ENUM_VAL_1 TestMessage_TestEnum = 1
	TestMessage_TEST_ENUM_VAL_2 TestMessage_TestEnum = 2
)

// Enum value maps for TestMessage_TestEnum.
var (
	TestMessage_TestEnum_name = map[int32]string{
		0: "TEST_ENUM_VAL_0",
		1: "TEST_ENUM_VAL_1",
		2: "TEST_ENUM_VAL_2",
	}
	TestMessage_TestEnum_value = map[string]int32{
		"TEST_ENUM_VAL_0": 0,
		"TEST_ENUM_VAL_1": 1,
		"TEST_ENUM_VAL_2": 2,
	}
)

func (x TestMessage_TestEnum) Enum() *TestMessage_TestEnum {
	p := new(TestMessage_TestEnum)
	*p = x
	return p
}

func (x TestMessage_TestEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestMessage_TestEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_test_message_proto_enumTypes[0].Descriptor()
}

func (TestMessage_TestEnum) Type() protoreflect.EnumType {
	return &file_test_message_proto_enumTypes[0]
}

func (x TestMessage_TestEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestMessage_TestEnum.Descriptor instead.
func (TestMessage_TestEnum) EnumDescriptor() ([]byte, []int) {
	return file_test_message_proto_rawDescGZIP(), []int{0, 0}
}

type TestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32Value                      int32                                   `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value                      int64                                   `protobuf:"varint,2,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value                     uint32                                  `protobuf:"varint,3,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value                     uint64                                  `protobuf:"varint,4,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value                     int32                                   `protobuf:"zigzag32,5,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value                     int64                                   `protobuf:"zigzag64,6,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	BoolValue                       bool                                    `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	EnumValue                       TestMessage_TestEnum                    `protobuf:"varint,8,opt,name=enum_value,json=enumValue,proto3,enum=strims.test.TestMessage_TestEnum" json:"enum_value,omitempty"`
	Fixed64Value                    uint64                                  `protobuf:"fixed64,9,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed64Value                   int64                                   `protobuf:"fixed64,10,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	DoubleValue                     float64                                 `protobuf:"fixed64,11,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	StringValue                     string                                  `protobuf:"bytes,12,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue                      []byte                                  `protobuf:"bytes,13,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	Fixed32Value                    uint32                                  `protobuf:"fixed32,14,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	SfixedValue                     int32                                   `protobuf:"fixed32,15,opt,name=sfixed_value,json=sfixedValue,proto3" json:"sfixed_value,omitempty"`
	FloatValue                      float32                                 `protobuf:"fixed32,16,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	EmbeddedMessageValue            *TestMessage_EmbeddedMessage            `protobuf:"bytes,17,opt,name=embedded_message_value,json=embeddedMessageValue,proto3" json:"embedded_message_value,omitempty"`
	SiblingMessageValue             *SiblingMessage                         `protobuf:"bytes,18,opt,name=sibling_message_value,json=siblingMessageValue,proto3" json:"sibling_message_value,omitempty"`
	StringInt32MapValue             map[string]int32                        `protobuf:"bytes,19,rep,name=string_int32_map_value,json=stringInt32MapValue,proto3" json:"string_int32_map_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringInt64MapValue             map[string]int64                        `protobuf:"bytes,20,rep,name=string_int64_map_value,json=stringInt64MapValue,proto3" json:"string_int64_map_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StringStringMapValue            map[string]string                       `protobuf:"bytes,21,rep,name=string_string_map_value,json=stringStringMapValue,proto3" json:"string_string_map_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringEmbeddedMessageMapValue   map[string]*TestMessage_EmbeddedMessage `protobuf:"bytes,22,rep,name=string_embedded_message_map_value,json=stringEmbeddedMessageMapValue,proto3" json:"string_embedded_message_map_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int32Int32MapValue              map[int32]int32                         `protobuf:"bytes,23,rep,name=int32_int32_map_value,json=int32Int32MapValue,proto3" json:"int32_int32_map_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int32Int64MapValue              map[int32]int64                         `protobuf:"bytes,24,rep,name=int32_int64_map_value,json=int32Int64MapValue,proto3" json:"int32_int64_map_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int32StringMapValue             map[int32]string                        `protobuf:"bytes,25,rep,name=int32_string_map_value,json=int32StringMapValue,proto3" json:"int32_string_map_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int32EmbeddedMessageMapValue    map[int32]*TestMessage_EmbeddedMessage  `protobuf:"bytes,26,rep,name=int32_embedded_message_map_value,json=int32EmbeddedMessageMapValue,proto3" json:"int32_embedded_message_map_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int64Int32MapValue              map[int64]int32                         `protobuf:"bytes,27,rep,name=int64_int32_map_value,json=int64Int32MapValue,proto3" json:"int64_int32_map_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int64Int64MapValue              map[int64]int64                         `protobuf:"bytes,28,rep,name=int64_int64_map_value,json=int64Int64MapValue,proto3" json:"int64_int64_map_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int64StringMapValue             map[int64]string                        `protobuf:"bytes,29,rep,name=int64_string_map_value,json=int64StringMapValue,proto3" json:"int64_string_map_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Int64EmbeddedMessageMapValue    map[int64]*TestMessage_EmbeddedMessage  `protobuf:"bytes,30,rep,name=int64_embedded_message_map_value,json=int64EmbeddedMessageMapValue,proto3" json:"int64_embedded_message_map_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepeatedInt32MapValue           []int32                                 `protobuf:"varint,31,rep,packed,name=repeated_int32_map_value,json=repeatedInt32MapValue,proto3" json:"repeated_int32_map_value,omitempty"`
	RepeatedInt64MapValue           []int64                                 `protobuf:"varint,32,rep,packed,name=repeated_int64_map_value,json=repeatedInt64MapValue,proto3" json:"repeated_int64_map_value,omitempty"`
	RepeatedStringMapValue          []string                                `protobuf:"bytes,33,rep,name=repeated_string_map_value,json=repeatedStringMapValue,proto3" json:"repeated_string_map_value,omitempty"`
	RepeatedEmbeddedMessageMapValue []*TestMessage_EmbeddedMessage          `protobuf:"bytes,34,rep,name=repeated_embedded_message_map_value,json=repeatedEmbeddedMessageMapValue,proto3" json:"repeated_embedded_message_map_value,omitempty"`
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_test_message_proto_rawDescGZIP(), []int{0}
}

func (x *TestMessage) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *TestMessage) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *TestMessage) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *TestMessage) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *TestMessage) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *TestMessage) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *TestMessage) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *TestMessage) GetEnumValue() TestMessage_TestEnum {
	if x != nil {
		return x.EnumValue
	}
	return TestMessage_TEST_ENUM_VAL_0
}

func (x *TestMessage) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *TestMessage) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

func (x *TestMessage) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *TestMessage) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *TestMessage) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *TestMessage) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *TestMessage) GetSfixedValue() int32 {
	if x != nil {
		return x.SfixedValue
	}
	return 0
}

func (x *TestMessage) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *TestMessage) GetEmbeddedMessageValue() *TestMessage_EmbeddedMessage {
	if x != nil {
		return x.EmbeddedMessageValue
	}
	return nil
}

func (x *TestMessage) GetSiblingMessageValue() *SiblingMessage {
	if x != nil {
		return x.SiblingMessageValue
	}
	return nil
}

func (x *TestMessage) GetStringInt32MapValue() map[string]int32 {
	if x != nil {
		return x.StringInt32MapValue
	}
	return nil
}

func (x *TestMessage) GetStringInt64MapValue() map[string]int64 {
	if x != nil {
		return x.StringInt64MapValue
	}
	return nil
}

func (x *TestMessage) GetStringStringMapValue() map[string]string {
	if x != nil {
		return x.StringStringMapValue
	}
	return nil
}

func (x *TestMessage) GetStringEmbeddedMessageMapValue() map[string]*TestMessage_EmbeddedMessage {
	if x != nil {
		return x.StringEmbeddedMessageMapValue
	}
	return nil
}

func (x *TestMessage) GetInt32Int32MapValue() map[int32]int32 {
	if x != nil {
		return x.Int32Int32MapValue
	}
	return nil
}

func (x *TestMessage) GetInt32Int64MapValue() map[int32]int64 {
	if x != nil {
		return x.Int32Int64MapValue
	}
	return nil
}

func (x *TestMessage) GetInt32StringMapValue() map[int32]string {
	if x != nil {
		return x.Int32StringMapValue
	}
	return nil
}

func (x *TestMessage) GetInt32EmbeddedMessageMapValue() map[int32]*TestMessage_EmbeddedMessage {
	if x != nil {
		return x.Int32EmbeddedMessageMapValue
	}
	return nil
}

func (x *TestMessage) GetInt64Int32MapValue() map[int64]int32 {
	if x != nil {
		return x.Int64Int32MapValue
	}
	return nil
}

func (x *TestMessage) GetInt64Int64MapValue() map[int64]int64 {
	if x != nil {
		return x.Int64Int64MapValue
	}
	return nil
}

func (x *TestMessage) GetInt64StringMapValue() map[int64]string {
	if x != nil {
		return x.Int64StringMapValue
	}
	return nil
}

func (x *TestMessage) GetInt64EmbeddedMessageMapValue() map[int64]*TestMessage_EmbeddedMessage {
	if x != nil {
		return x.Int64EmbeddedMessageMapValue
	}
	return nil
}

func (x *TestMessage) GetRepeatedInt32MapValue() []int32 {
	if x != nil {
		return x.RepeatedInt32MapValue
	}
	return nil
}

func (x *TestMessage) GetRepeatedInt64MapValue() []int64 {
	if x != nil {
		return x.RepeatedInt64MapValue
	}
	return nil
}

func (x *TestMessage) GetRepeatedStringMapValue() []string {
	if x != nil {
		return x.RepeatedStringMapValue
	}
	return nil
}

func (x *TestMessage) GetRepeatedEmbeddedMessageMapValue() []*TestMessage_EmbeddedMessage {
	if x != nil {
		return x.RepeatedEmbeddedMessageMapValue
	}
	return nil
}

type SiblingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SiblingMessage) Reset() {
	*x = SiblingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiblingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiblingMessage) ProtoMessage() {}

func (x *SiblingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiblingMessage.ProtoReflect.Descriptor instead.
func (*SiblingMessage) Descriptor() ([]byte, []int) {
	return file_test_message_proto_rawDescGZIP(), []int{1}
}

type Foo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Foo) Reset() {
	*x = Foo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Foo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Foo) ProtoMessage() {}

func (x *Foo) ProtoReflect() protoreflect.Message {
	mi := &file_test_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Foo.ProtoReflect.Descriptor instead.
func (*Foo) Descriptor() ([]byte, []int) {
	return file_test_message_proto_rawDescGZIP(), []int{2}
}

type Bar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestFoo         *Foo          `protobuf:"bytes,1,opt,name=test_foo,json=testFoo,proto3" json:"test_foo,omitempty"`
	TestBarFoo      *Bar_Foo      `protobuf:"bytes,2,opt,name=test_bar_foo,json=testBarFoo,proto3" json:"test_bar_foo,omitempty"`
	TestInternalFoo *internal.Foo `protobuf:"bytes,3,opt,name=test_internal_foo,json=testInternalFoo,proto3" json:"test_internal_foo,omitempty"`
}

func (x *Bar) Reset() {
	*x = Bar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bar) ProtoMessage() {}

func (x *Bar) ProtoReflect() protoreflect.Message {
	mi := &file_test_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bar.ProtoReflect.Descriptor instead.
func (*Bar) Descriptor() ([]byte, []int) {
	return file_test_message_proto_rawDescGZIP(), []int{3}
}

func (x *Bar) GetTestFoo() *Foo {
	if x != nil {
		return x.TestFoo
	}
	return nil
}

func (x *Bar) GetTestBarFoo() *Bar_Foo {
	if x != nil {
		return x.TestBarFoo
	}
	return nil
}

func (x *Bar) GetTestInternalFoo() *internal.Foo {
	if x != nil {
		return x.TestInternalFoo
	}
	return nil
}

type TestMessage_EmbeddedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmbeddedValue int32 `protobuf:"varint,1,opt,name=embedded_value,json=embeddedValue,proto3" json:"embedded_value,omitempty"`
}

func (x *TestMessage_EmbeddedMessage) Reset() {
	*x = TestMessage_EmbeddedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage_EmbeddedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage_EmbeddedMessage) ProtoMessage() {}

func (x *TestMessage_EmbeddedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage_EmbeddedMessage.ProtoReflect.Descriptor instead.
func (*TestMessage_EmbeddedMessage) Descriptor() ([]byte, []int) {
	return file_test_message_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TestMessage_EmbeddedMessage) GetEmbeddedValue() int32 {
	if x != nil {
		return x.EmbeddedValue
	}
	return 0
}

type Bar_Foo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestFoo         *Foo          `protobuf:"bytes,1,opt,name=test_foo,json=testFoo,proto3" json:"test_foo,omitempty"`
	TestBarFoo      *Bar_Foo      `protobuf:"bytes,2,opt,name=test_bar_foo,json=testBarFoo,proto3" json:"test_bar_foo,omitempty"`
	TestInternalFoo *internal.Foo `protobuf:"bytes,3,opt,name=test_internal_foo,json=testInternalFoo,proto3" json:"test_internal_foo,omitempty"`
}

func (x *Bar_Foo) Reset() {
	*x = Bar_Foo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bar_Foo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bar_Foo) ProtoMessage() {}

func (x *Bar_Foo) ProtoReflect() protoreflect.Message {
	mi := &file_test_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bar_Foo.ProtoReflect.Descriptor instead.
func (*Bar_Foo) Descriptor() ([]byte, []int) {
	return file_test_message_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Bar_Foo) GetTestFoo() *Foo {
	if x != nil {
		return x.TestFoo
	}
	return nil
}

func (x *Bar_Foo) GetTestBarFoo() *Bar_Foo {
	if x != nil {
		return x.TestBarFoo
	}
	return nil
}

func (x *Bar_Foo) GetTestInternalFoo() *internal.Foo {
	if x != nil {
		return x.TestInternalFoo
	}
	return nil
}

type Bar_Foo_Bar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestFoo               *Foo                  `protobuf:"bytes,1,opt,name=test_foo,json=testFoo,proto3" json:"test_foo,omitempty"`
	TestBarFoo            *Bar_Foo              `protobuf:"bytes,2,opt,name=test_bar_foo,json=testBarFoo,proto3" json:"test_bar_foo,omitempty"`
	TestBarFoo2           *Bar_Foo              `protobuf:"bytes,3,opt,name=test_bar_foo2,json=testBarFoo2,proto3" json:"test_bar_foo2,omitempty"`
	TestBarFooBar         *Bar_Foo_Bar          `protobuf:"bytes,4,opt,name=test_bar_foo_bar,json=testBarFooBar,proto3" json:"test_bar_foo_bar,omitempty"`
	TestBarFooBar2        *Bar_Foo_Bar          `protobuf:"bytes,5,opt,name=test_bar_foo_bar2,json=testBarFooBar2,proto3" json:"test_bar_foo_bar2,omitempty"`
	TestInternalFoo       *internal.Foo         `protobuf:"bytes,6,opt,name=test_internal_foo,json=testInternalFoo,proto3" json:"test_internal_foo,omitempty"`
	TestInternalBarFoo    *internal.Bar_Foo     `protobuf:"bytes,7,opt,name=test_internal_bar_foo,json=testInternalBarFoo,proto3" json:"test_internal_bar_foo,omitempty"`
	TestInternalBarFooBar *internal.Bar_Foo_Bar `protobuf:"bytes,8,opt,name=test_internal_bar_foo_bar,json=testInternalBarFooBar,proto3" json:"test_internal_bar_foo_bar,omitempty"`
}

func (x *Bar_Foo_Bar) Reset() {
	*x = Bar_Foo_Bar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bar_Foo_Bar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bar_Foo_Bar) ProtoMessage() {}

func (x *Bar_Foo_Bar) ProtoReflect() protoreflect.Message {
	mi := &file_test_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bar_Foo_Bar.ProtoReflect.Descriptor instead.
func (*Bar_Foo_Bar) Descriptor() ([]byte, []int) {
	return file_test_message_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *Bar_Foo_Bar) GetTestFoo() *Foo {
	if x != nil {
		return x.TestFoo
	}
	return nil
}

func (x *Bar_Foo_Bar) GetTestBarFoo() *Bar_Foo {
	if x != nil {
		return x.TestBarFoo
	}
	return nil
}

func (x *Bar_Foo_Bar) GetTestBarFoo2() *Bar_Foo {
	if x != nil {
		return x.TestBarFoo2
	}
	return nil
}

func (x *Bar_Foo_Bar) GetTestBarFooBar() *Bar_Foo_Bar {
	if x != nil {
		return x.TestBarFooBar
	}
	return nil
}

func (x *Bar_Foo_Bar) GetTestBarFooBar2() *Bar_Foo_Bar {
	if x != nil {
		return x.TestBarFooBar2
	}
	return nil
}

func (x *Bar_Foo_Bar) GetTestInternalFoo() *internal.Foo {
	if x != nil {
		return x.TestInternalFoo
	}
	return nil
}

func (x *Bar_Foo_Bar) GetTestInternalBarFoo() *internal.Bar_Foo {
	if x != nil {
		return x.TestInternalBarFoo
	}
	return nil
}

func (x *Bar_Foo_Bar) GetTestInternalBarFooBar() *internal.Bar_Foo_Bar {
	if x != nil {
		return x.TestInternalBarFooBar
	}
	return nil
}

var File_test_message_proto protoreflect.FileDescriptor

var file_test_message_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x1b, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x5e, 0x0a, 0x16, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4f, 0x0a, 0x15, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x13, 0x73,
	0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72,
	0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x85, 0x01,
	0x0a, 0x21, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x74, 0x72, 0x69,
	0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x69,
	0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x66, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x15,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74,
	0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x63, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x82,
	0x01, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x69,
	0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x1f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x76, 0x0a, 0x23, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x1f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x46, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x22, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45,
	0x0a, 0x17, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x79, 0x0a,
	0x21, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x45, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x79,
	0x0a, 0x21, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x08, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c,
	0x5f, 0x32, 0x10, 0x02, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x05, 0x0a, 0x03, 0x46, 0x6f, 0x6f, 0x22, 0x8a, 0x07,
	0x0a, 0x03, 0x42, 0x61, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x46,
	0x6f, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x66,
	0x6f, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d,
	0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x42, 0x61, 0x72, 0x46, 0x6f, 0x6f, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x6f, 0x6f,
	0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f,
	0x6f, 0x1a, 0xd6, 0x05, 0x0a, 0x03, 0x46, 0x6f, 0x6f, 0x12, 0x2b, 0x0a, 0x08, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74,
	0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x07, 0x74,
	0x65, 0x73, 0x74, 0x46, 0x6f, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62,
	0x61, 0x72, 0x5f, 0x66, 0x6f, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x2e, 0x46,
	0x6f, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x42, 0x61, 0x72, 0x46, 0x6f, 0x6f, 0x12, 0x45,
	0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x66, 0x6f, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x69,
	0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x1a, 0xa2, 0x04, 0x0a, 0x03, 0x42, 0x61, 0x72, 0x12, 0x2b, 0x0a,
	0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f,
	0x6f, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x6f, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x66, 0x6f, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42,
	0x61, 0x72, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x42, 0x61, 0x72, 0x46,
	0x6f, 0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x66,
	0x6f, 0x6f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x69,
	0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x2e, 0x46, 0x6f, 0x6f, 0x52,
	0x0b, 0x74, 0x65, 0x73, 0x74, 0x42, 0x61, 0x72, 0x46, 0x6f, 0x6f, 0x32, 0x12, 0x41, 0x0a, 0x10,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x66, 0x6f, 0x6f, 0x5f, 0x62, 0x61, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x2e, 0x46, 0x6f, 0x6f, 0x2e, 0x42, 0x61, 0x72,
	0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x42, 0x61, 0x72, 0x46, 0x6f, 0x6f, 0x42, 0x61, 0x72, 0x12,
	0x43, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x66, 0x6f, 0x6f, 0x5f,
	0x62, 0x61, 0x72, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72,
	0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x72, 0x2e, 0x46, 0x6f, 0x6f,
	0x2e, 0x42, 0x61, 0x72, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x42, 0x61, 0x72, 0x46, 0x6f, 0x6f,
	0x42, 0x61, 0x72, 0x32, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x12, 0x50, 0x0a, 0x15, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x72,
	0x5f, 0x66, 0x6f, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72,
	0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x42, 0x61, 0x72, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x61, 0x72, 0x46, 0x6f, 0x6f, 0x12, 0x5b, 0x0a,
	0x19, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x62,
	0x61, 0x72, 0x5f, 0x66, 0x6f, 0x6f, 0x5f, 0x62, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6d, 0x73, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x42, 0x61, 0x72, 0x2e, 0x46, 0x6f, 0x6f, 0x2e,
	0x42, 0x61, 0x72, 0x52, 0x15, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x42, 0x61, 0x72, 0x46, 0x6f, 0x6f, 0x42, 0x61, 0x72, 0x42, 0x53, 0x0a, 0x1a, 0x6f, 0x72,
	0x67, 0x2e, 0x6d, 0x65, 0x6d, 0x65, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x65, 0x6d, 0x65, 0x4c, 0x61, 0x62, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x3b, 0x74, 0x65, 0x73, 0x74, 0xba, 0x02, 0x03, 0x53, 0x54, 0x4d, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_message_proto_rawDescOnce sync.Once
	file_test_message_proto_rawDescData = file_test_message_proto_rawDesc
)

func file_test_message_proto_rawDescGZIP() []byte {
	file_test_message_proto_rawDescOnce.Do(func() {
		file_test_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_message_proto_rawDescData)
	})
	return file_test_message_proto_rawDescData
}

var file_test_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_message_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_test_message_proto_goTypes = []interface{}{
	(TestMessage_TestEnum)(0),           // 0: strims.test.TestMessage.TestEnum
	(*TestMessage)(nil),                 // 1: strims.test.TestMessage
	(*SiblingMessage)(nil),              // 2: strims.test.SiblingMessage
	(*Foo)(nil),                         // 3: strims.test.Foo
	(*Bar)(nil),                         // 4: strims.test.Bar
	(*TestMessage_EmbeddedMessage)(nil), // 5: strims.test.TestMessage.EmbeddedMessage
	nil,                                 // 6: strims.test.TestMessage.StringInt32MapValueEntry
	nil,                                 // 7: strims.test.TestMessage.StringInt64MapValueEntry
	nil,                                 // 8: strims.test.TestMessage.StringStringMapValueEntry
	nil,                                 // 9: strims.test.TestMessage.StringEmbeddedMessageMapValueEntry
	nil,                                 // 10: strims.test.TestMessage.Int32Int32MapValueEntry
	nil,                                 // 11: strims.test.TestMessage.Int32Int64MapValueEntry
	nil,                                 // 12: strims.test.TestMessage.Int32StringMapValueEntry
	nil,                                 // 13: strims.test.TestMessage.Int32EmbeddedMessageMapValueEntry
	nil,                                 // 14: strims.test.TestMessage.Int64Int32MapValueEntry
	nil,                                 // 15: strims.test.TestMessage.Int64Int64MapValueEntry
	nil,                                 // 16: strims.test.TestMessage.Int64StringMapValueEntry
	nil,                                 // 17: strims.test.TestMessage.Int64EmbeddedMessageMapValueEntry
	(*Bar_Foo)(nil),                     // 18: strims.test.Bar.Foo
	(*Bar_Foo_Bar)(nil),                 // 19: strims.test.Bar.Foo.Bar
	(*internal.Foo)(nil),                // 20: strims.test.internal.Foo
	(*internal.Bar_Foo)(nil),            // 21: strims.test.internal.Bar.Foo
	(*internal.Bar_Foo_Bar)(nil),        // 22: strims.test.internal.Bar.Foo.Bar
}
var file_test_message_proto_depIdxs = []int32{
	0,  // 0: strims.test.TestMessage.enum_value:type_name -> strims.test.TestMessage.TestEnum
	5,  // 1: strims.test.TestMessage.embedded_message_value:type_name -> strims.test.TestMessage.EmbeddedMessage
	2,  // 2: strims.test.TestMessage.sibling_message_value:type_name -> strims.test.SiblingMessage
	6,  // 3: strims.test.TestMessage.string_int32_map_value:type_name -> strims.test.TestMessage.StringInt32MapValueEntry
	7,  // 4: strims.test.TestMessage.string_int64_map_value:type_name -> strims.test.TestMessage.StringInt64MapValueEntry
	8,  // 5: strims.test.TestMessage.string_string_map_value:type_name -> strims.test.TestMessage.StringStringMapValueEntry
	9,  // 6: strims.test.TestMessage.string_embedded_message_map_value:type_name -> strims.test.TestMessage.StringEmbeddedMessageMapValueEntry
	10, // 7: strims.test.TestMessage.int32_int32_map_value:type_name -> strims.test.TestMessage.Int32Int32MapValueEntry
	11, // 8: strims.test.TestMessage.int32_int64_map_value:type_name -> strims.test.TestMessage.Int32Int64MapValueEntry
	12, // 9: strims.test.TestMessage.int32_string_map_value:type_name -> strims.test.TestMessage.Int32StringMapValueEntry
	13, // 10: strims.test.TestMessage.int32_embedded_message_map_value:type_name -> strims.test.TestMessage.Int32EmbeddedMessageMapValueEntry
	14, // 11: strims.test.TestMessage.int64_int32_map_value:type_name -> strims.test.TestMessage.Int64Int32MapValueEntry
	15, // 12: strims.test.TestMessage.int64_int64_map_value:type_name -> strims.test.TestMessage.Int64Int64MapValueEntry
	16, // 13: strims.test.TestMessage.int64_string_map_value:type_name -> strims.test.TestMessage.Int64StringMapValueEntry
	17, // 14: strims.test.TestMessage.int64_embedded_message_map_value:type_name -> strims.test.TestMessage.Int64EmbeddedMessageMapValueEntry
	5,  // 15: strims.test.TestMessage.repeated_embedded_message_map_value:type_name -> strims.test.TestMessage.EmbeddedMessage
	3,  // 16: strims.test.Bar.test_foo:type_name -> strims.test.Foo
	18, // 17: strims.test.Bar.test_bar_foo:type_name -> strims.test.Bar.Foo
	20, // 18: strims.test.Bar.test_internal_foo:type_name -> strims.test.internal.Foo
	5,  // 19: strims.test.TestMessage.StringEmbeddedMessageMapValueEntry.value:type_name -> strims.test.TestMessage.EmbeddedMessage
	5,  // 20: strims.test.TestMessage.Int32EmbeddedMessageMapValueEntry.value:type_name -> strims.test.TestMessage.EmbeddedMessage
	5,  // 21: strims.test.TestMessage.Int64EmbeddedMessageMapValueEntry.value:type_name -> strims.test.TestMessage.EmbeddedMessage
	3,  // 22: strims.test.Bar.Foo.test_foo:type_name -> strims.test.Foo
	18, // 23: strims.test.Bar.Foo.test_bar_foo:type_name -> strims.test.Bar.Foo
	20, // 24: strims.test.Bar.Foo.test_internal_foo:type_name -> strims.test.internal.Foo
	3,  // 25: strims.test.Bar.Foo.Bar.test_foo:type_name -> strims.test.Foo
	18, // 26: strims.test.Bar.Foo.Bar.test_bar_foo:type_name -> strims.test.Bar.Foo
	18, // 27: strims.test.Bar.Foo.Bar.test_bar_foo2:type_name -> strims.test.Bar.Foo
	19, // 28: strims.test.Bar.Foo.Bar.test_bar_foo_bar:type_name -> strims.test.Bar.Foo.Bar
	19, // 29: strims.test.Bar.Foo.Bar.test_bar_foo_bar2:type_name -> strims.test.Bar.Foo.Bar
	20, // 30: strims.test.Bar.Foo.Bar.test_internal_foo:type_name -> strims.test.internal.Foo
	21, // 31: strims.test.Bar.Foo.Bar.test_internal_bar_foo:type_name -> strims.test.internal.Bar.Foo
	22, // 32: strims.test.Bar.Foo.Bar.test_internal_bar_foo_bar:type_name -> strims.test.internal.Bar.Foo.Bar
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_test_message_proto_init() }
func file_test_message_proto_init() {
	if File_test_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiblingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Foo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage_EmbeddedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bar_Foo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bar_Foo_Bar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_message_proto_goTypes,
		DependencyIndexes: file_test_message_proto_depIdxs,
		EnumInfos:         file_test_message_proto_enumTypes,
		MessageInfos:      file_test_message_proto_msgTypes,
	}.Build()
	File_test_message_proto = out.File
	file_test_message_proto_rawDesc = nil
	file_test_message_proto_goTypes = nil
	file_test_message_proto_depIdxs = nil
}
